import { Directionality } from '@angular/cdk/bidi';
import * as i0 from '@angular/core';
import { Input, ChangeDetectionStrategy, Component, inject, ChangeDetectorRef, DestroyRef, EventEmitter, Output, NgZone, DOCUMENT, numberAttribute, ViewChild, ViewEncapsulation, contentChildren, input, output, linkedSignal, computed, effect, NgModule } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i1$1 from 'ng-zorro-antd/button';
import { NzButtonModule } from 'ng-zorro-antd/button';
import { NgTemplateOutlet } from '@angular/common';
import { NzStringTemplateOutletDirective } from 'ng-zorro-antd/core/outlet';
import * as i1 from 'ng-zorro-antd/icon';
import { NzIconModule } from 'ng-zorro-antd/icon';
import * as i2 from 'ng-zorro-antd/core/transition-patch';
import * as i3 from 'ng-zorro-antd/core/wave';
import { fadeMotion } from 'ng-zorro-antd/core/animation';
import { __esDecorate, __runInitializers } from 'tslib';
import { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';
import { Subject, Subscription } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { WithConfig, NzConfigService } from 'ng-zorro-antd/core/config';
import { NzScrollService } from 'ng-zorro-antd/core/services';
import { fromEventOutsideAngular } from 'ng-zorro-antd/core/util';

/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
class NzFloatButtonContentComponent {
    nzIcon = null;
    nzDescription = null;
    nzShape = 'circle';
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "20.1.1", type: NzFloatButtonContentComponent, isStandalone: true, selector: "nz-float-button-content", inputs: { nzIcon: "nzIcon", nzDescription: "nzDescription", nzShape: "nzShape" }, exportAs: ["nzFloatButtonContent"], ngImport: i0, template: `
    <div class="ant-float-btn-body">
      <div class="ant-float-btn-content">
        @if (nzDescription || nzIcon) {
          @if (nzIcon) {
            <div class="ant-float-btn-icon">
              <ng-template [ngTemplateOutlet]="nzIcon"></ng-template>
            </div>
          }
          @if (nzDescription && nzShape === 'square') {
            <div class="ant-float-btn-description">
              <ng-container *nzStringTemplateOutlet="nzDescription">
                {{ nzDescription }}
              </ng-container>
            </div>
          }
        } @else {
          <div class="ant-float-btn-icon">
            <nz-icon nzType="file-text" nzTheme="outline" />
          </div>
        }
      </div>
    </div>
  `, isInline: true, dependencies: [{ kind: "ngmodule", type: NzIconModule }, { kind: "directive", type: i1.NzIconDirective, selector: "nz-icon,[nz-icon]", inputs: ["nzSpin", "nzRotate", "nzType", "nzTheme", "nzTwotoneColor", "nzIconfont"], exportAs: ["nzIcon"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NzStringTemplateOutletDirective, selector: "[nzStringTemplateOutlet]", inputs: ["nzStringTemplateOutletContext", "nzStringTemplateOutlet"], exportAs: ["nzStringTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nz-float-button-content',
                    exportAs: 'nzFloatButtonContent',
                    imports: [NzIconModule, NgTemplateOutlet, NzStringTemplateOutletDirective],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <div class="ant-float-btn-body">
      <div class="ant-float-btn-content">
        @if (nzDescription || nzIcon) {
          @if (nzIcon) {
            <div class="ant-float-btn-icon">
              <ng-template [ngTemplateOutlet]="nzIcon"></ng-template>
            </div>
          }
          @if (nzDescription && nzShape === 'square') {
            <div class="ant-float-btn-description">
              <ng-container *nzStringTemplateOutlet="nzDescription">
                {{ nzDescription }}
              </ng-container>
            </div>
          }
        } @else {
          <div class="ant-float-btn-icon">
            <nz-icon nzType="file-text" nzTheme="outline" />
          </div>
        }
      </div>
    </div>
  `
                }]
        }], propDecorators: { nzIcon: [{
                type: Input
            }], nzDescription: [{
                type: Input
            }], nzShape: [{
                type: Input
            }] } });

/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
class NzFloatButtonComponent {
    directionality = inject(Directionality);
    cdr = inject(ChangeDetectorRef);
    destroyRef = inject(DestroyRef);
    nzHref = null;
    nzTarget = null;
    nzType = 'default';
    nzShape = 'circle';
    nzIcon = null;
    nzDescription = null;
    nzOnClick = new EventEmitter();
    dir = 'ltr';
    constructor() {
        this.dir = this.directionality.value;
    }
    ngOnInit() {
        this.directionality.change?.pipe(takeUntilDestroyed(this.destroyRef)).subscribe(direction => {
            this.dir = direction;
            this.cdr.detectChanges();
        });
        this.dir = this.directionality.value;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "20.1.1", type: NzFloatButtonComponent, isStandalone: true, selector: "nz-float-button", inputs: { nzHref: "nzHref", nzTarget: "nzTarget", nzType: "nzType", nzShape: "nzShape", nzIcon: "nzIcon", nzDescription: "nzDescription" }, outputs: { nzOnClick: "nzOnClick" }, host: { properties: { "class.ant-float-btn-circle": "nzShape === 'circle'", "class.ant-float-btn-square": "nzShape === 'square'", "class.ant-float-btn-rtl": "dir === 'rtl'" }, classAttribute: "ant-float-btn" }, exportAs: ["nzFloatButton"], ngImport: i0, template: `
    @if (!!nzHref) {
      <a
        [target]="nzTarget"
        [href]="nzHref"
        nz-button
        [nzType]="nzType"
        [class.ant-float-btn-default]="nzType === 'default'"
        class="ant-float-btn-inner"
        (click)="nzOnClick.emit(true)"
      >
        <nz-float-button-content
          [nzIcon]="nzIcon"
          [nzDescription]="nzDescription"
          [nzShape]="nzShape"
        ></nz-float-button-content>
      </a>
    } @else {
      <button
        nz-button
        [nzType]="nzType"
        [class.ant-float-btn-default]="nzType === 'default'"
        class="ant-float-btn-inner"
        (click)="nzOnClick.emit(true)"
      >
        <nz-float-button-content
          [nzIcon]="nzIcon"
          [nzDescription]="nzDescription"
          [nzShape]="nzShape"
        ></nz-float-button-content>
      </button>
    }
  `, isInline: true, dependencies: [{ kind: "ngmodule", type: NzButtonModule }, { kind: "component", type: i1$1.NzButtonComponent, selector: "button[nz-button], a[nz-button]", inputs: ["nzBlock", "nzGhost", "nzSearch", "nzLoading", "nzDanger", "disabled", "tabIndex", "nzType", "nzShape", "nzSize"], exportAs: ["nzButton"] }, { kind: "directive", type: i2.ɵNzTransitionPatchDirective, selector: "[nz-button], [nz-icon], nz-icon, [nz-menu-item], [nz-submenu], nz-select-top-control, nz-select-placeholder, nz-input-group", inputs: ["hidden"] }, { kind: "directive", type: i3.NzWaveDirective, selector: "[nz-wave],button[nz-button]:not([nzType=\"link\"]):not([nzType=\"text\"])", inputs: ["nzWaveExtraNode"], exportAs: ["nzWave"] }, { kind: "component", type: NzFloatButtonContentComponent, selector: "nz-float-button-content", inputs: ["nzIcon", "nzDescription", "nzShape"], exportAs: ["nzFloatButtonContent"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nz-float-button',
                    exportAs: 'nzFloatButton',
                    imports: [NzButtonModule, NzFloatButtonContentComponent],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    @if (!!nzHref) {
      <a
        [target]="nzTarget"
        [href]="nzHref"
        nz-button
        [nzType]="nzType"
        [class.ant-float-btn-default]="nzType === 'default'"
        class="ant-float-btn-inner"
        (click)="nzOnClick.emit(true)"
      >
        <nz-float-button-content
          [nzIcon]="nzIcon"
          [nzDescription]="nzDescription"
          [nzShape]="nzShape"
        ></nz-float-button-content>
      </a>
    } @else {
      <button
        nz-button
        [nzType]="nzType"
        [class.ant-float-btn-default]="nzType === 'default'"
        class="ant-float-btn-inner"
        (click)="nzOnClick.emit(true)"
      >
        <nz-float-button-content
          [nzIcon]="nzIcon"
          [nzDescription]="nzDescription"
          [nzShape]="nzShape"
        ></nz-float-button-content>
      </button>
    }
  `,
                    host: {
                        class: 'ant-float-btn',
                        '[class.ant-float-btn-circle]': `nzShape === 'circle'`,
                        '[class.ant-float-btn-square]': `nzShape === 'square'`,
                        '[class.ant-float-btn-rtl]': `dir === 'rtl'`
                    }
                }]
        }], ctorParameters: () => [], propDecorators: { nzHref: [{
                type: Input
            }], nzTarget: [{
                type: Input
            }], nzType: [{
                type: Input
            }], nzShape: [{
                type: Input
            }], nzIcon: [{
                type: Input
            }], nzDescription: [{
                type: Input
            }], nzOnClick: [{
                type: Output
            }] } });

const NZ_CONFIG_MODULE_NAME = 'backTop';
const passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });
let NzFloatButtonTopComponent = (() => {
    let _nzVisibilityHeight_decorators;
    let _nzVisibilityHeight_initializers = [];
    let _nzVisibilityHeight_extraInitializers = [];
    return class NzFloatButtonTopComponent {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _nzVisibilityHeight_decorators = [WithConfig()];
            __esDecorate(null, null, _nzVisibilityHeight_decorators, { kind: "field", name: "nzVisibilityHeight", static: false, private: false, access: { has: obj => "nzVisibilityHeight" in obj, get: obj => obj.nzVisibilityHeight, set: (obj, value) => { obj.nzVisibilityHeight = value; } }, metadata: _metadata }, _nzVisibilityHeight_initializers, _nzVisibilityHeight_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        nzConfigService = inject(NzConfigService);
        scrollSrv = inject(NzScrollService);
        platform = inject(Platform);
        ngZone = inject(NgZone);
        cdr = inject(ChangeDetectorRef);
        directionality = inject(Directionality);
        destroyRef = inject(DestroyRef);
        _nzModuleName = NZ_CONFIG_MODULE_NAME;
        scrollListenerDestroy$ = new Subject();
        target = null;
        visible = false;
        dir = 'ltr';
        nzHref = null;
        nzType = 'default';
        nzShape = 'circle';
        nzIcon = null;
        nzDescription = null;
        nzTemplate;
        nzVisibilityHeight = __runInitializers(this, _nzVisibilityHeight_initializers, 400);
        nzTarget = __runInitializers(this, _nzVisibilityHeight_extraInitializers);
        nzDuration = 450;
        nzOnClick = new EventEmitter();
        set backTop(backTop) {
            if (backTop) {
                this.backTopClickSubscription.unsubscribe();
                this.backTopClickSubscription = fromEventOutsideAngular(backTop.nativeElement, 'click')
                    .pipe(takeUntilDestroyed(this.destroyRef))
                    .subscribe(() => {
                    this.scrollSrv.scrollTo(this.getTarget(), 0, { duration: this.nzDuration });
                    if (this.nzOnClick.observers.length) {
                        this.ngZone.run(() => this.nzOnClick.emit(true));
                    }
                });
            }
        }
        doc = inject(DOCUMENT);
        backTopClickSubscription = Subscription.EMPTY;
        constructor() {
            this.destroyRef.onDestroy(() => {
                this.scrollListenerDestroy$.next();
                this.scrollListenerDestroy$.complete();
            });
        }
        ngOnInit() {
            this.registerScrollEvent();
            this.dir = this.directionality.value;
            this.directionality.change?.pipe(takeUntilDestroyed(this.destroyRef)).subscribe(direction => {
                this.dir = direction;
                this.cdr.detectChanges();
            });
        }
        getTarget() {
            return this.target || window;
        }
        handleScroll() {
            if (this.visible === this.scrollSrv.getScroll(this.getTarget()) > this.nzVisibilityHeight) {
                return;
            }
            this.visible = !this.visible;
            this.cdr.detectChanges();
        }
        registerScrollEvent() {
            if (!this.platform.isBrowser) {
                return;
            }
            this.scrollListenerDestroy$.next();
            this.handleScroll();
            fromEventOutsideAngular(this.getTarget(), 'scroll', passiveEventListenerOptions)
                .pipe(debounceTime(50), takeUntil(this.scrollListenerDestroy$))
                .subscribe(() => this.handleScroll());
        }
        detectChanges() {
            this.cdr.detectChanges();
        }
        ngOnChanges(changes) {
            const { nzTarget } = changes;
            if (nzTarget) {
                this.target = typeof this.nzTarget === 'string' ? this.doc.querySelector(this.nzTarget) : this.nzTarget;
                this.registerScrollEvent();
            }
        }
        static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonTopComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
        static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "20.1.1", type: NzFloatButtonTopComponent, isStandalone: true, selector: "nz-float-button-top", inputs: { nzHref: "nzHref", nzType: "nzType", nzShape: "nzShape", nzIcon: "nzIcon", nzDescription: "nzDescription", nzTemplate: "nzTemplate", nzVisibilityHeight: ["nzVisibilityHeight", "nzVisibilityHeight", numberAttribute], nzTarget: "nzTarget", nzDuration: ["nzDuration", "nzDuration", numberAttribute] }, outputs: { nzOnClick: "nzOnClick" }, host: { properties: { "class.ant-float-btn-circle": "nzShape === 'circle'", "class.ant-float-btn-hidden": "!visible", "class.ant-float-btn-square": "nzShape === 'square'", "class.ant-float-btn-rtl": "dir === 'rtl'" }, classAttribute: "ant-float-btn ant-float-btn-top" }, viewQueries: [{ propertyName: "backTop", first: true, predicate: ["backTop"], descendants: true }], exportAs: ["nzFloatButtonTop"], usesOnChanges: true, ngImport: i0, template: `
    <div #backTop @fadeMotion>
      <nz-float-button
        [nzIcon]="nzIcon || top"
        [nzDescription]="nzDescription"
        [nzHref]="nzHref"
        [nzType]="nzType"
        [nzShape]="nzShape"
      ></nz-float-button>
      <ng-template #top>
        <nz-icon nzType="vertical-align-top" nzTheme="outline" />
      </ng-template>
    </div>
  `, isInline: true, dependencies: [{ kind: "component", type: NzFloatButtonComponent, selector: "nz-float-button", inputs: ["nzHref", "nzTarget", "nzType", "nzShape", "nzIcon", "nzDescription"], outputs: ["nzOnClick"], exportAs: ["nzFloatButton"] }, { kind: "ngmodule", type: NzIconModule }, { kind: "directive", type: i1.NzIconDirective, selector: "nz-icon,[nz-icon]", inputs: ["nzSpin", "nzRotate", "nzType", "nzTheme", "nzTwotoneColor", "nzIconfont"], exportAs: ["nzIcon"] }], animations: [fadeMotion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
    };
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonTopComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nz-float-button-top',
                    exportAs: 'nzFloatButtonTop',
                    imports: [NzFloatButtonComponent, NzIconModule],
                    animations: [fadeMotion],
                    template: `
    <div #backTop @fadeMotion>
      <nz-float-button
        [nzIcon]="nzIcon || top"
        [nzDescription]="nzDescription"
        [nzHref]="nzHref"
        [nzType]="nzType"
        [nzShape]="nzShape"
      ></nz-float-button>
      <ng-template #top>
        <nz-icon nzType="vertical-align-top" nzTheme="outline" />
      </ng-template>
    </div>
  `,
                    host: {
                        class: 'ant-float-btn ant-float-btn-top',
                        '[class.ant-float-btn-circle]': `nzShape === 'circle'`,
                        '[class.ant-float-btn-hidden]': `!visible`,
                        '[class.ant-float-btn-square]': `nzShape === 'square'`,
                        '[class.ant-float-btn-rtl]': `dir === 'rtl'`
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None
                }]
        }], ctorParameters: () => [], propDecorators: { nzHref: [{
                type: Input
            }], nzType: [{
                type: Input
            }], nzShape: [{
                type: Input
            }], nzIcon: [{
                type: Input
            }], nzDescription: [{
                type: Input
            }], nzTemplate: [{
                type: Input
            }], nzVisibilityHeight: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], nzTarget: [{
                type: Input
            }], nzDuration: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], nzOnClick: [{
                type: Output
            }], backTop: [{
                type: ViewChild,
                args: ['backTop', { static: false }]
            }] } });

/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
class NzFloatButtonGroupComponent {
    nzFloatButtonComponents = contentChildren(NzFloatButtonComponent, ...(ngDevMode ? [{ debugName: "nzFloatButtonComponents" }] : []));
    nzFloatButtonTopComponents = contentChildren(NzFloatButtonTopComponent, ...(ngDevMode ? [{ debugName: "nzFloatButtonTopComponents" }] : []));
    nzHref = input(null, ...(ngDevMode ? [{ debugName: "nzHref" }] : []));
    nzTarget = input(null, ...(ngDevMode ? [{ debugName: "nzTarget" }] : []));
    nzType = input('default', ...(ngDevMode ? [{ debugName: "nzType" }] : []));
    nzIcon = input(null, ...(ngDevMode ? [{ debugName: "nzIcon" }] : []));
    nzDescription = input(null, ...(ngDevMode ? [{ debugName: "nzDescription" }] : []));
    nzShape = input('circle', ...(ngDevMode ? [{ debugName: "nzShape" }] : []));
    nzTrigger = input(null, ...(ngDevMode ? [{ debugName: "nzTrigger" }] : []));
    nzOpen = input(null, ...(ngDevMode ? [{ debugName: "nzOpen" }] : []));
    nzPlacement = input('top', ...(ngDevMode ? [{ debugName: "nzPlacement" }] : []));
    nzOnOpenChange = output();
    dir = inject(Directionality).valueSignal;
    open = linkedSignal(() => !!this.nzOpen());
    isMenuMode = computed(() => !!this.nzTrigger() && ['click', 'hover'].includes(this.nzTrigger()), ...(ngDevMode ? [{ debugName: "isMenuMode" }] : []));
    isControlledMode = computed(() => this.nzOpen() !== null, ...(ngDevMode ? [{ debugName: "isControlledMode" }] : []));
    class = computed(() => {
        const shape = this.nzShape();
        const dir = this.dir();
        const classes = ['ant-float-btn-group', this.generateClass(shape)];
        if (!this.isMenuMode()) {
            classes.push(this.generateClass(`${shape}-shadow`));
        }
        else {
            classes.push(this.generateClass(this.nzPlacement()));
        }
        if (dir === 'rtl') {
            classes.push(this.generateClass(dir));
        }
        return classes;
    }, ...(ngDevMode ? [{ debugName: "class" }] : []));
    constructor() {
        effect(() => {
            if (this.nzFloatButtonComponents()) {
                this.nzFloatButtonComponents().forEach(item => {
                    item.nzShape = this.nzShape();
                });
            }
            if (this.nzFloatButtonTopComponents()) {
                this.nzFloatButtonTopComponents().forEach(item => {
                    item.nzShape = this.nzShape();
                    item.detectChanges();
                });
            }
        });
    }
    clickOpenMenu() {
        this.handleEvent('click', true);
    }
    hoverOpenMenu() {
        this.handleEvent('hover', true);
    }
    clickCloseMenu() {
        this.handleEvent('click', false);
    }
    hoverCloseMenu() {
        this.handleEvent('hover', false);
    }
    handleEvent(type, isOpen) {
        if (this.nzTrigger() !== type || this.isControlledMode() || this.open() === isOpen) {
            return;
        }
        this.open.set(isOpen);
        this.nzOnOpenChange.emit(isOpen);
    }
    generateClass(suffix) {
        return `ant-float-btn-group-${suffix}`;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "20.1.1", type: NzFloatButtonGroupComponent, isStandalone: true, selector: "nz-float-button-group", inputs: { nzHref: { classPropertyName: "nzHref", publicName: "nzHref", isSignal: true, isRequired: false, transformFunction: null }, nzTarget: { classPropertyName: "nzTarget", publicName: "nzTarget", isSignal: true, isRequired: false, transformFunction: null }, nzType: { classPropertyName: "nzType", publicName: "nzType", isSignal: true, isRequired: false, transformFunction: null }, nzIcon: { classPropertyName: "nzIcon", publicName: "nzIcon", isSignal: true, isRequired: false, transformFunction: null }, nzDescription: { classPropertyName: "nzDescription", publicName: "nzDescription", isSignal: true, isRequired: false, transformFunction: null }, nzShape: { classPropertyName: "nzShape", publicName: "nzShape", isSignal: true, isRequired: false, transformFunction: null }, nzTrigger: { classPropertyName: "nzTrigger", publicName: "nzTrigger", isSignal: true, isRequired: false, transformFunction: null }, nzOpen: { classPropertyName: "nzOpen", publicName: "nzOpen", isSignal: true, isRequired: false, transformFunction: null }, nzPlacement: { classPropertyName: "nzPlacement", publicName: "nzPlacement", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { nzOnOpenChange: "nzOnOpenChange" }, host: { listeners: { "mouseleave": "hoverCloseMenu()" }, properties: { "class": "class()" } }, queries: [{ propertyName: "nzFloatButtonComponents", predicate: NzFloatButtonComponent, isSignal: true }, { propertyName: "nzFloatButtonTopComponents", predicate: NzFloatButtonTopComponent, isSignal: true }], exportAs: ["nzFloatButtonGroup"], ngImport: i0, template: `
    @if (!isMenuMode()) {
      <ng-container *ngTemplateOutlet="menu"></ng-container>
    } @else {
      @if (open()) {
        <div class="ant-float-btn-group-wrap" @fadeMotion><ng-container *ngTemplateOutlet="menu"></ng-container></div>
      }
      <nz-float-button
        class="ant-float-btn-group-trigger"
        [nzType]="nzType()"
        [nzIcon]="open() ? close : nzIcon()"
        [nzShape]="nzShape()"
        [nzDescription]="open() ? null : nzDescription()"
        (nzOnClick)="open() ? clickCloseMenu() : clickOpenMenu()"
        (mouseover)="hoverOpenMenu()"
      ></nz-float-button>
    }
    <ng-template #menu><ng-content></ng-content></ng-template>
    <ng-template #close>
      <nz-icon nzType="close" nzTheme="outline" />
    </ng-template>
  `, isInline: true, dependencies: [{ kind: "component", type: NzFloatButtonComponent, selector: "nz-float-button", inputs: ["nzHref", "nzTarget", "nzType", "nzShape", "nzIcon", "nzDescription"], outputs: ["nzOnClick"], exportAs: ["nzFloatButton"] }, { kind: "ngmodule", type: NzIconModule }, { kind: "directive", type: i1.NzIconDirective, selector: "nz-icon,[nz-icon]", inputs: ["nzSpin", "nzRotate", "nzType", "nzTheme", "nzTwotoneColor", "nzIconfont"], exportAs: ["nzIcon"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], animations: [fadeMotion], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nz-float-button-group',
                    exportAs: 'nzFloatButtonGroup',
                    imports: [NzFloatButtonComponent, NzIconModule, NgTemplateOutlet],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [fadeMotion],
                    template: `
    @if (!isMenuMode()) {
      <ng-container *ngTemplateOutlet="menu"></ng-container>
    } @else {
      @if (open()) {
        <div class="ant-float-btn-group-wrap" @fadeMotion><ng-container *ngTemplateOutlet="menu"></ng-container></div>
      }
      <nz-float-button
        class="ant-float-btn-group-trigger"
        [nzType]="nzType()"
        [nzIcon]="open() ? close : nzIcon()"
        [nzShape]="nzShape()"
        [nzDescription]="open() ? null : nzDescription()"
        (nzOnClick)="open() ? clickCloseMenu() : clickOpenMenu()"
        (mouseover)="hoverOpenMenu()"
      ></nz-float-button>
    }
    <ng-template #menu><ng-content></ng-content></ng-template>
    <ng-template #close>
      <nz-icon nzType="close" nzTheme="outline" />
    </ng-template>
  `,
                    host: {
                        '[class]': 'class()',
                        '(mouseleave)': 'hoverCloseMenu()'
                    }
                }]
        }], ctorParameters: () => [] });

/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
class NzFloatButtonModule {
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonModule, imports: [NzFloatButtonComponent,
            NzFloatButtonGroupComponent,
            NzFloatButtonTopComponent,
            NzFloatButtonContentComponent], exports: [NzFloatButtonComponent,
            NzFloatButtonGroupComponent,
            NzFloatButtonTopComponent,
            NzFloatButtonContentComponent] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonModule, imports: [NzFloatButtonComponent,
            NzFloatButtonGroupComponent,
            NzFloatButtonTopComponent,
            NzFloatButtonContentComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.1", ngImport: i0, type: NzFloatButtonModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [
                        NzFloatButtonComponent,
                        NzFloatButtonGroupComponent,
                        NzFloatButtonTopComponent,
                        NzFloatButtonContentComponent
                    ],
                    imports: [
                        NzFloatButtonComponent,
                        NzFloatButtonGroupComponent,
                        NzFloatButtonTopComponent,
                        NzFloatButtonContentComponent
                    ]
                }]
        }] });

/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NzFloatButtonComponent, NzFloatButtonContentComponent, NzFloatButtonGroupComponent, NzFloatButtonModule, NzFloatButtonTopComponent };
//# sourceMappingURL=ng-zorro-antd-float-button.mjs.map
