{"version":3,"file":"ng-zorro-antd-badge.mjs","sources":["../../components/badge/badge-sup.component.ts","../../components/badge/preset-colors.ts","../../components/badge/badge.component.ts","../../components/badge/ribbon.component.ts","../../components/badge/badge.module.ts","../../components/badge/types.ts","../../components/badge/public-api.ts","../../components/badge/ng-zorro-antd-badge.ts"],"sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  numberAttribute,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { zoomBadgeMotion } from 'ng-zorro-antd/core/animation';\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\nimport { NzSafeAny, NzSizeDSType } from 'ng-zorro-antd/core/types';\n\n@Component({\n  selector: 'nz-badge-sup',\n  exportAs: 'nzBadgeSup',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [zoomBadgeMotion],\n  imports: [NzNoAnimationDirective],\n  template: `\n    @if (count <= nzOverflowCount) {\n      @for (n of maxNumberArray; track n; let i = $index) {\n        <span\n          [nzNoAnimation]=\"noAnimation\"\n          class=\"ant-scroll-number-only\"\n          [style.transform]=\"'translateY(' + -countArray[i] * 100 + '%)'\"\n        >\n          @if (!nzDot && countArray[i] !== undefined) {\n            @for (p of countSingleArray; track p) {\n              <p class=\"ant-scroll-number-only-unit\" [class.current]=\"p === countArray[i]\">\n                {{ p }}\n              </p>\n            }\n          }\n        </span>\n      }\n    } @else {\n      {{ nzOverflowCount }}+\n    }\n  `,\n  host: {\n    class: 'ant-scroll-number',\n    '[@.disabled]': `disableAnimation`,\n    '[@zoomBadgeMotion]': '',\n    '[attr.title]': `nzTitle === null ? '' : nzTitle || nzCount`,\n    '[style]': `nzStyle`,\n    '[style.right.px]': `nzOffset && nzOffset[0] ? -nzOffset[0] : null`,\n    '[style.margin-top.px]': `nzOffset && nzOffset[1] ? nzOffset[1] : null`,\n    '[class.ant-badge-count]': `!nzDot`,\n    '[class.ant-badge-count-sm]': `nzSize === 'small'`,\n    '[class.ant-badge-dot]': `nzDot`,\n    '[class.ant-badge-multiple-words]': `countArray.length >= 2`\n  }\n})\nexport class NzBadgeSupComponent implements OnInit, OnChanges {\n  @Input() nzOffset?: [number, number];\n  @Input() nzTitle?: string | null | undefined;\n  @Input() nzStyle: Record<string, string> | null = null;\n  @Input() nzDot = false;\n  @Input({ transform: numberAttribute }) nzOverflowCount: number = 99;\n  @Input() disableAnimation = false;\n  @Input() nzCount?: number | TemplateRef<NzSafeAny>;\n  @Input() noAnimation = false;\n  @Input() nzSize: NzSizeDSType = 'default';\n  maxNumberArray: string[] = [];\n  countArray: number[] = [];\n  count: number = 0;\n  countSingleArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  generateMaxNumberArray(): void {\n    this.maxNumberArray = this.nzOverflowCount\n      .toString()\n      .split('')\n      .map((value: string, index: number) => `${value}-${index}`);\n  }\n\n  ngOnInit(): void {\n    this.generateMaxNumberArray();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzOverflowCount, nzCount } = changes;\n    if (nzCount && typeof nzCount.currentValue === 'number') {\n      this.count = Math.max(0, nzCount.currentValue);\n      this.countArray = this.count\n        .toString()\n        .split('')\n        .map(item => +item);\n    }\n    if (nzOverflowCount) {\n      this.generateMaxNumberArray();\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport const badgePresetColors: readonly string[] = [\n  'pink',\n  'red',\n  'yellow',\n  'orange',\n  'cyan',\n  'green',\n  'blue',\n  'purple',\n  'geekblue',\n  'magenta',\n  'volcano',\n  'gold',\n  'lime'\n];\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  TemplateRef,\n  ViewEncapsulation,\n  booleanAttribute,\n  inject,\n  DestroyRef\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n\nimport { zoomBadgeMotion } from 'ng-zorro-antd/core/animation';\nimport { NzConfigKey, NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzSafeAny, NzSizeDSType } from 'ng-zorro-antd/core/types';\n\nimport { NzBadgeSupComponent } from './badge-sup.component';\nimport { badgePresetColors } from './preset-colors';\nimport { NzBadgeStatusType } from './types';\n\nconst NZ_CONFIG_MODULE_NAME: NzConfigKey = 'badge';\n\n@Component({\n  selector: 'nz-badge',\n  exportAs: 'nzBadge',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [zoomBadgeMotion],\n  imports: [NzBadgeSupComponent, NzOutletModule],\n  template: `\n    @if (nzStatus || nzColor) {\n      <span\n        class=\"ant-badge-status-dot ant-badge-status-{{ nzStatus || presetColor }}\"\n        [style.background]=\"!presetColor && nzColor\"\n        [style]=\"nzStyle\"\n      ></span>\n      <span class=\"ant-badge-status-text\">\n        <ng-container *nzStringTemplateOutlet=\"nzText\">{{ nzText }}</ng-container>\n      </span>\n    }\n    <ng-content />\n    <ng-container *nzStringTemplateOutlet=\"nzCount\">\n      @if (showSup) {\n        <nz-badge-sup\n          [nzOffset]=\"nzOffset\"\n          [nzSize]=\"nzSize\"\n          [nzTitle]=\"nzTitle\"\n          [nzStyle]=\"nzStyle\"\n          [nzDot]=\"nzDot\"\n          [nzOverflowCount]=\"nzOverflowCount\"\n          [disableAnimation]=\"!!(nzStandalone || nzStatus || nzColor || noAnimation?.nzNoAnimation)\"\n          [nzCount]=\"nzCount\"\n          [noAnimation]=\"!!noAnimation?.nzNoAnimation\"\n        />\n      }\n    </ng-container>\n  `,\n  host: {\n    class: 'ant-badge',\n    '[class.ant-badge-status]': 'nzStatus',\n    '[class.ant-badge-not-a-wrapper]': '!!(nzStandalone || nzStatus || nzColor)'\n  }\n})\nexport class NzBadgeComponent implements OnChanges, OnInit {\n  public nzConfigService = inject(NzConfigService);\n  private renderer = inject(Renderer2);\n  private cdr = inject(ChangeDetectorRef);\n  private elementRef = inject(ElementRef<HTMLElement>);\n  private directionality = inject(Directionality);\n  private destroyRef = inject(DestroyRef);\n\n  readonly _nzModuleName: NzConfigKey = NZ_CONFIG_MODULE_NAME;\n\n  showSup = false;\n  presetColor: string | null = null;\n  dir: Direction = 'ltr';\n\n  @Input({ transform: booleanAttribute }) nzShowZero: boolean = false;\n  @Input({ transform: booleanAttribute }) nzShowDot = true;\n  @Input({ transform: booleanAttribute }) nzStandalone = false;\n  @Input({ transform: booleanAttribute }) nzDot = false;\n  @Input() @WithConfig() nzOverflowCount: number = 99;\n  @Input() @WithConfig() nzColor?: string = undefined;\n  @Input() nzStyle: Record<string, string> | null = null;\n  @Input() nzText?: string | TemplateRef<void> | null = null;\n  @Input() nzTitle?: string | null | undefined;\n  @Input() nzStatus?: NzBadgeStatusType | string;\n  @Input() nzCount?: number | TemplateRef<NzSafeAny>;\n  @Input() nzOffset?: [number, number];\n  @Input() nzSize: NzSizeDSType = 'default';\n\n  noAnimation = inject(NzNoAnimationDirective, { host: true, optional: true });\n\n  ngOnInit(): void {\n    this.directionality.change?.pipe(takeUntilDestroyed(this.destroyRef)).subscribe((direction: Direction) => {\n      this.dir = direction;\n      this.prepareBadgeForRtl();\n      this.cdr.detectChanges();\n    });\n    this.dir = this.directionality.value;\n    this.prepareBadgeForRtl();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzColor, nzShowDot, nzDot, nzCount, nzShowZero } = changes;\n    if (nzColor) {\n      this.presetColor = this.nzColor && badgePresetColors.indexOf(this.nzColor) !== -1 ? this.nzColor : null;\n    }\n    if (nzShowDot || nzDot || nzCount || nzShowZero) {\n      this.showSup =\n        (this.nzShowDot && this.nzDot) ||\n        (typeof this.nzCount === 'number' && this.nzCount! > 0) ||\n        (typeof this.nzCount === 'number' && this.nzCount! <= 0 && this.nzShowZero);\n    }\n  }\n\n  private prepareBadgeForRtl(): void {\n    if (this.isRtlLayout) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'ant-badge-rtl');\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'ant-badge-rtl');\n    }\n  }\n\n  get isRtlLayout(): boolean {\n    return this.dir === 'rtl';\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\n\nimport { badgePresetColors } from './preset-colors';\n\n@Component({\n  selector: 'nz-ribbon',\n  exportAs: 'nzRibbon',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NzOutletModule],\n  template: `\n    <ng-content></ng-content>\n    <div\n      class=\"ant-ribbon\"\n      [class]=\"presetColor && 'ant-ribbon-color-' + presetColor\"\n      [class.ant-ribbon-placement-end]=\"nzPlacement === 'end'\"\n      [class.ant-ribbon-placement-start]=\"nzPlacement === 'start'\"\n      [style.background-color]=\"!presetColor && nzColor\"\n    >\n      <ng-container *nzStringTemplateOutlet=\"nzText\">\n        <span class=\"ant-ribbon-text\">{{ nzText }}</span>\n      </ng-container>\n      <div class=\"ant-ribbon-corner\" [style.color]=\"!presetColor && nzColor\"></div>\n    </div>\n  `,\n  host: { class: 'ant-ribbon-wrapper' }\n})\nexport class NzRibbonComponent implements OnChanges {\n  @Input() nzColor: string | undefined;\n  @Input() nzPlacement: 'start' | 'end' = 'end';\n  @Input() nzText: string | TemplateRef<void> | null = null;\n  presetColor: string | null = null;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzColor } = changes;\n    if (nzColor) {\n      this.presetColor = this.nzColor && badgePresetColors.indexOf(this.nzColor) !== -1 ? this.nzColor : null;\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\n\nimport { NzBadgeComponent } from './badge.component';\nimport { NzRibbonComponent } from './ribbon.component';\n\n@NgModule({\n  exports: [NzBadgeComponent, NzRibbonComponent],\n  imports: [NzBadgeComponent, NzRibbonComponent]\n})\nexport class NzBadgeModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport type NzBadgeStatusType = 'success' | 'processing' | 'default' | 'error' | 'warning';\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport * from './badge.component';\nexport * from './ribbon.component';\nexport * from './badge.module';\nexport * from './types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}