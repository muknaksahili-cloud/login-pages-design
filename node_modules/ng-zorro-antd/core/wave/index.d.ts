import { Platform } from '@angular/cdk/platform';
import * as i0 from '@angular/core';
import { NgZone, InjectionToken, EnvironmentProviders, OnInit, OnDestroy } from '@angular/core';

/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */

declare class NzWaveRenderer {
    private triggerElement;
    private ngZone;
    private insertExtraNode;
    private platform;
    private cspNonce?;
    private waveTransitionDuration;
    private styleForPseudo;
    private extraNode;
    private lastTime;
    clickHandler: (event: MouseEvent) => void;
    get waveAttributeName(): string;
    constructor(triggerElement: HTMLElement, ngZone: NgZone, insertExtraNode: boolean, platform: Platform, cspNonce?: string | null | undefined);
    onClick: (event: MouseEvent) => void;
    bindTriggerEvent(): void;
    removeTriggerEvent(): void;
    removeStyleAndExtraNode(): void;
    destroy(): void;
    private fadeOutWave;
    private isValidColor;
    private isNotGrey;
    private getWaveColor;
    private runTimeoutOutsideZone;
}

interface NzWaveConfig {
    disabled?: boolean;
}
declare const NZ_WAVE_GLOBAL_DEFAULT_CONFIG: NzWaveConfig;
declare const NZ_WAVE_GLOBAL_CONFIG: InjectionToken<NzWaveConfig>;
declare function provideNzWave(config: NzWaveConfig): EnvironmentProviders;
declare class NzWaveDirective implements OnInit, OnDestroy {
    nzWaveExtraNode: boolean;
    private waveRenderer?;
    private waveDisabled;
    get disabled(): boolean;
    get rendererRef(): NzWaveRenderer | undefined;
    private cspNonce;
    private platform;
    private config;
    private animationType;
    private ngZone;
    private elementRef;
    constructor();
    isConfigDisabled(): boolean;
    ngOnDestroy(): void;
    ngOnInit(): void;
    renderWaveIfEnabled(): void;
    disable(): void;
    enable(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NzWaveDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NzWaveDirective, "[nz-wave],button[nz-button]:not([nzType=\"link\"]):not([nzType=\"text\"])", ["nzWave"], { "nzWaveExtraNode": { "alias": "nzWaveExtraNode"; "required": false; }; }, {}, never, never, true, never>;
}

declare class NzWaveModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<NzWaveModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<NzWaveModule, never, [typeof NzWaveDirective], [typeof NzWaveDirective]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<NzWaveModule>;
}

export { NZ_WAVE_GLOBAL_CONFIG, NZ_WAVE_GLOBAL_DEFAULT_CONFIG, NzWaveDirective, NzWaveModule, NzWaveRenderer, provideNzWave };
export type { NzWaveConfig };
